{"version":3,"sources":["globalStyle.js","components/WeatherCard/WeatherCard.styles.js","components/WeatherCard/WeatherCard.js","components/WeatherApp/WeatherApp.styles.js","components/WeatherApp/WeatherApp.js","hooks/useWeather.js","views/Root.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Card","styled","div","RegularText","p","description","css","Temperature","h1","Country","InfoBox","WeatherCard","weather","Object","entries","length","location","name","country","current","temp_c","src","condition","icon","alt","text","defaultProps","Wrapper","main","SearchWrapper","Input","input","Button","button","SearchResults","ul","isVisible","SearchResultsItem","li","isHighlighted","WeatherApp","cities1","useState","cities","setCities","setWeather","searching","isSearching","fetchWeather","useCallback","city","a","axios","get","process","res","data","console","log","useWeather","useEffect","useCombobox","items","onInputValueChange","inputValue","filter","item","toLowerCase","startsWith","isOpen","getMenuProps","getInputProps","getComboboxProps","highlightedIndex","getItemProps","placeholder","map","index","key","onClick","setTimeout","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08dbc4f3.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html, * {\r\n        box-sizing: border-box;\r\n    }\r\n    \r\n    body {\r\n        font-family: 'Montserrat', sans-serif;\r\n        margin: 0;\r\n        background-color: #091f44;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const Card = styled.div`\r\n  background-color: #ededed;\r\n  width: 250px;\r\n  height: 350px;\r\n\r\n  padding: 40px 20px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n\r\n  border-radius: 16px;\r\n`;\r\n\r\nexport const RegularText = styled.p`\r\n  color: grey;\r\n  font-size: 1.4rem;\r\n  margin: 5px 5px 5px 0;\r\n\r\n  ${({ description }) =>\r\n    description &&\r\n    css`\r\n      font-size: 1rem;\r\n      font-weight: bold;\r\n      text-transform: uppercase;\r\n    `}\r\n`;\r\n\r\nexport const Temperature = styled.h1`\r\n  color: black;\r\n  font-size: 3rem;\r\n  margin: 15px 0;\r\n`;\r\n\r\nexport const Country = styled.div`\r\n  height: 15px;\r\n  color: white;\r\n  font-size: 0.6rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n\r\n  background-color: orange;\r\n  border-radius: 25px;\r\n  padding: 5px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const InfoBox = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Card,\r\n  RegularText,\r\n  Temperature,\r\n  Country,\r\n  InfoBox,\r\n} from './WeatherCard.styles';\r\n\r\nconst WeatherCard = ({ weather }) => (\r\n  <Card>\r\n    {Object.entries(weather).length !== 0 ? (\r\n      <>\r\n        <InfoBox>\r\n          <RegularText>{weather?.location?.name}</RegularText>\r\n          <Country>{weather?.location?.country}</Country>\r\n        </InfoBox>\r\n        <Temperature>{weather?.current?.temp_c}Â°C</Temperature>\r\n        <img src={weather?.current?.condition?.icon} alt=\"actual weather\" />\r\n        <RegularText description>\r\n          {weather?.current?.condition?.text}\r\n        </RegularText>\r\n      </>\r\n    ) : (\r\n      <RegularText>Pick a city</RegularText>\r\n    )}\r\n  </Card>\r\n);\r\n\r\nWeatherCard.propTypes = {\r\n  weather: PropTypes.shape({\r\n    location: PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      country: PropTypes.string.isRequired,\r\n    }),\r\n    current: PropTypes.shape({\r\n      temp_c: PropTypes.number.isRequired,\r\n      condition: PropTypes.shape({\r\n        icon: PropTypes.string.isRequired,\r\n        text: PropTypes.string.isRequired,\r\n      }),\r\n    }),\r\n  }),\r\n};\r\n\r\nWeatherCard.defaultProps = {\r\n  weather: {\r\n    location: {\r\n      name: 'Warsaw',\r\n      country: 'Poland',\r\n    },\r\n    current: {\r\n      temp_c: 0,\r\n      condition: {\r\n        icon: '',\r\n        text: '',\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport default WeatherCard;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const SearchWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 0 0 50px 0;\r\n\r\n  position: relative;\r\n\r\n  @media (max-width: 576px) {\r\n    flex-direction: column;\r\n    margin: 0;\r\n  }\r\n\r\n  &:after {\r\n    content: '';\r\n    position: absolute;\r\n    height: 1px;\r\n    width: 300px;\r\n    background-color: white;\r\n\r\n    left: 0;\r\n    bottom: 0;\r\n\r\n    @media (max-width: 576px) {\r\n      bottom: 90px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  width: 300px;\r\n  height: 50px;\r\n  margin-right: 20px;\r\n  border: none;\r\n  background: transparent;\r\n  color: white;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  font-family: 'Montserrat', sans-serif;\r\n  width: 100px;\r\n  height: 50px;\r\n  cursor: pointer;\r\n\r\n  background-color: darkred;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n\r\n  @media (max-width: 576px) {\r\n    margin: 20px 0;\r\n  }\r\n`;\r\n\r\nexport const SearchResults = styled.ul`\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 200px;\r\n\r\n  background-color: white;\r\n  overflow-y: scroll;\r\n  padding: 5px;\r\n  list-style: none;\r\n\r\n  width: 300px;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 40px;\r\n`;\r\n\r\nexport const SearchResultsItem = styled.li`\r\n  font-weight: bold;\r\n  color: grey;\r\n  background-color: ${({ isHighlighted }) =>\r\n    isHighlighted ? 'lightgrey' : 'white'};\r\n  width: 100%;\r\n  padding: 20px 5px;\r\n\r\n  &:hover {\r\n    background-color: lightgrey;\r\n  }\r\n  &:not(:last-child) {\r\n    border-bottom: 1px solid darkred;\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useCombobox } from 'downshift';\r\nimport { useWeather } from 'hooks/useWeather';\r\nimport WeatherCard from 'components/WeatherCard/WeatherCard';\r\nimport {\r\n  Wrapper,\r\n  Input,\r\n  Button,\r\n  SearchResults,\r\n  SearchResultsItem,\r\n  SearchWrapper,\r\n} from './WeatherApp.styles';\r\n\r\nconst WeatherApp = () => {\r\n  const cities1 = [\r\n    'Paris',\r\n    'Berlin',\r\n    'Warsaw',\r\n    'London',\r\n    'Cracow',\r\n    'Brasilia',\r\n    'Lyon',\r\n  ];\r\n  const [cities, setCities] = useState(cities1);\r\n  const [weather, setWeather] = useState({});\r\n  const [searching, isSearching] = useState(false);\r\n\r\n  const { fetchWeather } = useWeather();\r\n\r\n  const handleSearchPermission = () => {\r\n    isSearching(true);\r\n    setTimeout(() => {\r\n      isSearching(false);\r\n    }, 100);\r\n  };\r\n\r\n  useEffect(() => {\r\n    searching &&\r\n      (async () => {\r\n        const weather = await fetchWeather(cities);\r\n        setWeather(weather);\r\n      })();\r\n  }, [cities, searching, fetchWeather]);\r\n\r\n  const {\r\n    isOpen,\r\n    getMenuProps,\r\n    getInputProps,\r\n    getComboboxProps,\r\n    highlightedIndex,\r\n    getItemProps,\r\n  } = useCombobox({\r\n    items: cities,\r\n    onInputValueChange: ({ inputValue }) => {\r\n      setCities(\r\n        cities1.filter((item) =>\r\n          item.toLowerCase().startsWith(inputValue.toLowerCase())\r\n        )\r\n      );\r\n    },\r\n  });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <SearchWrapper {...getComboboxProps()}>\r\n        <Input {...getInputProps()} placeholder=\"Search for a city\" />\r\n        <SearchResults\r\n          isVisible={isOpen && cities.length > 0}\r\n          {...getMenuProps()}\r\n          aria-label=\"results\"\r\n        >\r\n          {isOpen &&\r\n            cities.map((item, index) => (\r\n              <SearchResultsItem\r\n                isHighlighted={highlightedIndex === index}\r\n                {...getItemProps({ item, index })}\r\n                key={`${index}${item}`}\r\n              >\r\n                {item}\r\n              </SearchResultsItem>\r\n            ))}\r\n        </SearchResults>\r\n\r\n        <Button onClick={handleSearchPermission}>SUBMIT</Button>\r\n      </SearchWrapper>\r\n\r\n      <WeatherCard weather={weather} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n","import { useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport const useWeather = () => {\r\n  const BASE_URL = 'http://api.weatherapi.com/v1';\r\n\r\n  const fetchWeather = useCallback(async (city) => {\r\n    try {\r\n      const res = await axios.get(\r\n        `${BASE_URL}/current.json?key=${process.env.REACT_APP_WEATHERAPI_TOKEN}&q=${city}&aqi=no`\r\n      );\r\n      return res.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  return { fetchWeather };\r\n};\r\n","import React from 'react';\r\nimport GlobalStyle from 'globalStyle';\r\nimport WeatherApp from 'components/WeatherApp/WeatherApp';\r\n\r\nconst Root = () => (\r\n  <>\r\n    <GlobalStyle />\r\n    <WeatherApp />\r\n  </>\r\n);\r\n\r\nexport default Root;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from 'views/Root';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}